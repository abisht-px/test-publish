package models

import (
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jinzhu/gorm"

	_ "github.com/jinzhu/gorm/dialects/postgres"

	database "github.anim.dreamworks.com/DreamCloud/stella-api/db"
)

var db *gorm.DB

var EmptyUUID uuid.UUID = uuid.UUID{}
var EmptyTime time.Time = time.Time{}

// Model contains the columns/attributes common across all models
type Model struct {
	ID        uuid.UUID  `json:"id" binding:"-"`         // ID is auto generated on creation
	CreatedAt time.Time  `json:"created_at" binding:"-"` // CreatedAt is autogenerated on creation
	UpdatedAt time.Time  `json:"updated_at" binding:"-"` // UpdatedAt is autogenerated on update
	DeletedAt *time.Time `json:"deleted_at" binding:"-"` // DeletedAt is autogenerated on deletion
}

// We use a separate base model for tasks to give them an integer ID
// TODO: Figure out how to soft delete tasks. GORM does not auto manage this since the struct name is TaskModel vs Model.
//       Note that this is low priority since deleting tasks is not a supported/expected behavior.
type TaskModel struct {
	ID        uint       `json:"id" binding:"-" gorm:"primary_key"` // ID is auto generated on creation
	CreatedAt time.Time  `json:"created_at" binding:"-"`            // CreatedAt is autogenerated on creation
	UpdatedAt time.Time  `json:"updated_at" binding:"-"`            // UpdatedAt is autogenerated on update
	DeletedAt *time.Time `json:"deleted_at" binding:"-"`            // DeletedAt is autogenerated on deletion
}

// Used for type assertions to check if an object is scoped by Domain
type DomainScope struct {
	DomainID uuid.UUID
}

// Used for type assertions to check if an object is scoped by Project
type ProjectScope struct {
	ProjectID uuid.UUID
}

// BeforeCreate sets a new UUID on model creation.
// This hook is auto called by GORM on creation of the Model struct.
func (model *Model) BeforeCreate(scope *gorm.Scope) error {
	return scope.SetColumn("ID", uuid.New())
}

//================================================================================
// Database Functions
//================================================================================

func ConnectToDB() (*gorm.DB, error) {
	var err error
	db, err = database.Connect()
	return db, err
}

func dbWithScope(archived string, domainIDs interface{}, projectIDs interface{}) *gorm.DB {
	var scopedDB *gorm.DB

	// Set Archived Scope
	switch archived {
	case "included":
		scopedDB = db.Unscoped()
	case "only":
		scopedDB = db.Unscoped().Where("deleted_at IS NOT NULL")
	default:
		scopedDB = db
	}

	// Set Domain Scope
	if domainIDs != nil {
		scopedDB = scopedDB.Where("domain_id IN (?)", domainIDs)
	}

	// Set Project Scope
	if projectIDs != nil { // No projects allowed
		scopedDB = scopedDB.Where("project_id IN (?)", projectIDs)
	}

	return scopedDB
}

//================================================================================
// Helper Functions
//================================================================================

// Shorthand for finding an object by ID
func Find(obj interface{}, id interface{}) *gorm.DB {
	return db.Unscoped().First(obj, "id = ?", id)
}

// Shorthand for finding an object by a param
func FindBy(obj interface{}, id interface{}, param string) *gorm.DB {
	query := fmt.Sprintf("%v = ?", param)
	return db.Unscoped().First(obj, query, id)
}
